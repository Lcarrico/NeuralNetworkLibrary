memberSearchIndex = [{"p":"base","c":"NeuralNetwork","l":"addLayer(Layer<ArrayList<Float>>)","u":"addLayer(layers.Layer)"},{"p":"base","c":"NeuralNetwork","l":"addLayers(Layer<ArrayList<Float>>...)","u":"addLayers(layers.Layer...)"},{"p":"learning","c":"GeneticAlgorithm","l":"bestNeuralNetwork"},{"p":"base","c":"NeuralNetwork","l":"calc(ArrayList<Float>)","u":"calc(java.util.ArrayList)"},{"p":"layers","c":"HiddenLayer","l":"calc(ArrayList<Float>)","u":"calc(java.util.ArrayList)"},{"p":"layers","c":"HighestOutputLayer","l":"calc(ArrayList<Float>)","u":"calc(java.util.ArrayList)"},{"p":"layers","c":"InputLayer","l":"calc(ArrayList<Float>)","u":"calc(java.util.ArrayList)"},{"p":"layers","c":"RoundedOutputLayer","l":"calc(ArrayList<Float>)","u":"calc(java.util.ArrayList)"},{"p":"layers","c":"Node","l":"calc(float)"},{"p":"layers","c":"Layer","l":"calc(T)"},{"p":"layers","c":"OutputLayer","l":"calc(T)"},{"p":"base","c":"NeuralNetwork","l":"calcAll(ArrayList<ArrayList<Float>>)","u":"calcAll(java.util.ArrayList)"},{"p":"learning","c":"FitnessFunction","l":"calculate(NeuralNetwork<ArrayList<Integer>>)","u":"calculate(base.NeuralNetwork)"},{"p":"base","c":"NeuralNetwork","l":"clone()"},{"p":"layers","c":"HiddenLayer","l":"clone()"},{"p":"layers","c":"HighestOutputLayer","l":"clone()"},{"p":"layers","c":"InputLayer","l":"clone()"},{"p":"layers","c":"Layer","l":"clone()"},{"p":"layers","c":"Node","l":"clone()"},{"p":"layers","c":"OutputLayer","l":"clone()"},{"p":"layers","c":"RoundedOutputLayer","l":"clone()"},{"p":"utils","c":"NodeUtil","l":"cloneNodes(ArrayList<Node>)","u":"cloneNodes(java.util.ArrayList)"},{"p":"utils","c":"NodeUtil","l":"compareNodeList(ArrayList<Node>, ArrayList<Node>)","u":"compareNodeList(java.util.ArrayList,java.util.ArrayList)"},{"p":"utils","c":"GeneticAlgorithmUtil","l":"crossover(NeuralNetwork<ArrayList<Integer>>, NeuralNetwork<ArrayList<Integer>>)","u":"crossover(base.NeuralNetwork,base.NeuralNetwork)"},{"p":"learning","c":"GeneticAlgorithm","l":"evolve(float, float, float)","u":"evolve(float,float,float)"},{"p":"utils","c":"FitnessFunctions","l":"FitnessFunctions()","u":"%3Cinit%3E()"},{"p":"utils","c":"GeneticAlgorithmUtil","l":"flattenNodes(ArrayList<ArrayList<Node>>)","u":"flattenNodes(java.util.ArrayList)"},{"p":"utils","c":"GeneticAlgorithmUtil","l":"floatReverseComparator"},{"p":"utils","c":"NodeGenerator","l":"generate()"},{"p":"learning","c":"GeneticAlgorithm","l":"GeneticAlgorithm(NeuralNetwork<ArrayList<Integer>>, int, FitnessFunction)","u":"%3Cinit%3E(base.NeuralNetwork,int,learning.FitnessFunction)"},{"p":"utils","c":"GeneticAlgorithmUtil","l":"GeneticAlgorithmUtil()","u":"%3Cinit%3E()"},{"p":"learning","c":"GeneticAlgorithm","l":"getAllScores()"},{"p":"learning","c":"GeneticAlgorithm","l":"getBase()"},{"p":"base","c":"NeuralNetwork","l":"getLayers()"},{"p":"learning","c":"GeneticAlgorithm","l":"getNeuralNetworkArrayList()"},{"p":"base","c":"NeuralNetwork","l":"getNodes()"},{"p":"layers","c":"HiddenLayer","l":"getNodes()"},{"p":"layers","c":"HighestOutputLayer","l":"getNodes()"},{"p":"layers","c":"InputLayer","l":"getNodes()"},{"p":"layers","c":"Layer","l":"getNodes()"},{"p":"layers","c":"RoundedOutputLayer","l":"getNodes()"},{"p":"utils","c":"GeneticAlgorithmUtil","l":"getSampleIndices(ArrayList<Node>, Float)","u":"getSampleIndices(java.util.ArrayList,java.lang.Float)"},{"p":"utils","c":"GeneticAlgorithmUtil","l":"getSampleNodes(ArrayList<Node>, Float)","u":"getSampleNodes(java.util.ArrayList,java.lang.Float)"},{"p":"learning","c":"GeneticAlgorithm","l":"getTopNNs(ArrayList<Float>, Float)","u":"getTopNNs(java.util.ArrayList,java.lang.Float)"},{"p":"layers","c":"Node","l":"getWeight()"},{"p":"layers","c":"HiddenLayer","l":"HiddenLayer(int)","u":"%3Cinit%3E(int)"},{"p":"layers","c":"HiddenLayer","l":"HiddenLayer(String, int)","u":"%3Cinit%3E(java.lang.String,int)"},{"p":"layers","c":"HighestOutputLayer","l":"HighestOutputLayer()","u":"%3Cinit%3E()"},{"p":"layers","c":"InputLayer","l":"InputLayer()","u":"%3Cinit%3E()"},{"p":"utils","c":"ListUtil","l":"ListUtil()","u":"%3Cinit%3E()"},{"p":"utils","c":"GeneticAlgorithmUtil","l":"mutate(NeuralNetwork<ArrayList<Integer>>, float, float)","u":"mutate(base.NeuralNetwork,float,float)"},{"p":"learning","c":"GeneticAlgorithm","l":"mutateAll(float, float)","u":"mutateAll(float,float)"},{"p":"base","c":"NeuralNetwork","l":"name"},{"p":"utils","c":"FitnessFunctions","l":"NegativeSumOfAbsoluteDifferences(ArrayList<ArrayList<Float>>, ArrayList<ArrayList<Integer>>)","u":"NegativeSumOfAbsoluteDifferences(java.util.ArrayList,java.util.ArrayList)"},{"p":"base","c":"NeuralNetwork","l":"NeuralNetwork()","u":"%3Cinit%3E()"},{"p":"base","c":"NeuralNetwork","l":"NeuralNetwork(String)","u":"%3Cinit%3E(java.lang.String)"},{"p":"layers","c":"Node","l":"Node(float)","u":"%3Cinit%3E(float)"},{"p":"utils","c":"NodeGenerator","l":"NodeGenerator()","u":"%3Cinit%3E()"},{"p":"utils","c":"NodeUtil","l":"NodeUtil()","u":"%3Cinit%3E()"},{"p":"layers","c":"RoundedOutputLayer","l":"RoundedOutputLayer()","u":"%3Cinit%3E()"},{"p":"learning","c":"GeneticAlgorithm","l":"scores"},{"p":"learning","c":"GeneticAlgorithm","l":"setBase(NeuralNetwork<ArrayList<Integer>>)","u":"setBase(base.NeuralNetwork)"},{"p":"base","c":"NeuralNetwork","l":"setLayers(ArrayList<Layer<ArrayList<Float>>>)","u":"setLayers(java.util.ArrayList)"},{"p":"learning","c":"GeneticAlgorithm","l":"setNeuralNetworkArrayList(ArrayList<NeuralNetwork<ArrayList<Integer>>>)","u":"setNeuralNetworkArrayList(java.util.ArrayList)"},{"p":"base","c":"NeuralNetwork","l":"setNodes(ArrayList<ArrayList<Node>>)","u":"setNodes(java.util.ArrayList)"},{"p":"layers","c":"HiddenLayer","l":"setNodes(ArrayList<Node>)","u":"setNodes(java.util.ArrayList)"},{"p":"layers","c":"HighestOutputLayer","l":"setNodes(ArrayList<Node>)","u":"setNodes(java.util.ArrayList)"},{"p":"layers","c":"InputLayer","l":"setNodes(ArrayList<Node>)","u":"setNodes(java.util.ArrayList)"},{"p":"layers","c":"Layer","l":"setNodes(ArrayList<Node>)","u":"setNodes(java.util.ArrayList)"},{"p":"layers","c":"RoundedOutputLayer","l":"setNodes(ArrayList<Node>)","u":"setNodes(java.util.ArrayList)"},{"p":"base","c":"NeuralNetwork","l":"setOutputLayer(OutputLayer<ArrayList<Float>, O>)","u":"setOutputLayer(layers.OutputLayer)"},{"p":"layers","c":"Node","l":"setWeight(float)"},{"p":"base","c":"NeuralNetwork","l":"toString()"},{"p":"layers","c":"HiddenLayer","l":"toString()"},{"p":"layers","c":"HighestOutputLayer","l":"toString()"},{"p":"layers","c":"InputLayer","l":"toString()"},{"p":"layers","c":"Node","l":"toString()"},{"p":"layers","c":"RoundedOutputLayer","l":"toString()"},{"p":"utils","c":"ListUtil","l":"twoDArrayToList(T[][])"}];updateSearchResults();